import { useState, useEffect } from 'react'
import WebApp from '@twa-dev/sdk'
import HomePage from './pages/HomePage'
import HistoryPage from './pages/HistoryPage'
import ProfilePage from './pages/ProfilePage'
import BottomNavigation from './components/BottomNavigation'
import { userService } from './services/userService'
import { TelegramUserData, User } from './types/user'

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ–≥–¥–∞ Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
const mockUser = {
  id: 123456789,
  first_name: '–ò–≤–∞–Ω',
  last_name: '–ü–µ—Ç—Ä–æ–≤',
  username: 'ivan_petrov',
  photo_url: undefined as string | undefined
}

function App() {
  const [currentPage, setCurrentPage] = useState('home')
  const [user, setUser] = useState(mockUser)
  const [appUser, setAppUser] = useState<User | null>(null) // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
  const [isNewUser, setIsNewUser] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [closeModalsRef, setCloseModalsRef] = useState<(() => void) | null>(null)

  useEffect(() => {
    const initializeApp = async () => {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        WebApp.ready()
        WebApp.expand()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Telegram WebApp
        WebApp.setHeaderColor('#111827')
        WebApp.setBackgroundColor('#111827')

        let tgUserData = null;
        let telegramId = '';

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        if (WebApp.initDataUnsafe?.user) {
          const tgUser = WebApp.initDataUnsafe.user
          tgUserData = {
            id: tgUser.id,
            first_name: tgUser.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            last_name: tgUser.last_name || '',
            username: tgUser.username || '',
            photo_url: tgUser.photo_url
          }
          
          setUser(tgUserData)
          telegramId = tgUser.id.toString()
          
          console.log('Telegram user data loaded:', tgUser)
        } else {
          console.log('Using mock user data (Telegram WebApp not available)')
          tgUserData = mockUser
          telegramId = mockUser.id.toString()
        }

        // === –ù–û–í–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¶–ò–ö–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
        
        if (telegramId) {
          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
          const telegramData: TelegramUserData = {
            id: parseInt(telegramId),
            first_name: tgUserData.first_name,
            last_name: tgUserData.last_name || '',
            username: tgUserData.username || '',
            language_code: 'ru',
            is_bot: false
          }

          // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É (—Ç–æ–ª—å–∫–æ —Å Telegram ID)
          console.log('üìû –í—ã–∑—ã–≤–∞–µ–º userService.loginUser —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
            telegramId,
            telegramData
          });
          const session = await userService.loginUser(telegramId, telegramData);
          console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç userService.loginUser:', session);
          
          if (session) {
            setAppUser(session.user)
            setIsNewUser(session.isNewUser)
            
            if (session.isNewUser) {
              console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!')
              // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            } else {
              console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!')
            }
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
          }
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è Telegram
        WebApp.BackButton.hide()
        
        setIsLoading(false)
        console.log('üéâ Telegram WebApp –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!')
      } catch (error) {
        console.error('Error initializing app:', error)
        setIsLoading(false)
      }
    }

    initializeApp()
  }, [])

  console.log('App component rendered!', { currentPage, user, isLoading })

  // –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navigationItems = [
    { id: 'home', label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'pi pi-home', path: '/', active: currentPage === 'home' },
    { id: 'history', label: '–ò—Å—Ç–æ—Ä–∏—è', icon: 'pi pi-history', path: '/history', active: currentPage === 'history' },
    { id: 'profile', label: '–ü—Ä–æ—Ñ–∏–ª—å', icon: 'pi pi-user', path: '/profile', active: currentPage === 'profile' }
  ]

  const handleNavigationClick = (item: any) => {
    setCurrentPage(item.id)
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    if (item.id === 'home' && closeModalsRef) {
      closeModalsRef()
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const renderCurrentPage = () => {

    switch (currentPage) {
      case 'home':
        return <HomePage user={user} appUser={appUser} isNewUser={isNewUser} onCloseModals={setCloseModalsRef} />
      case 'history':
        return <HistoryPage user={user} appUser={appUser} currentPage={currentPage} setCurrentPage={setCurrentPage} />
      case 'profile':
        return <ProfilePage user={user} appUser={appUser} currentPage={currentPage} setCurrentPage={setCurrentPage} />
      default:
        return <HomePage user={user} appUser={appUser} isNewUser={isNewUser} onCloseModals={setCloseModalsRef} />
    }
  }

  // –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <div className="h-screen w-full flex items-center justify-center" style={{ backgroundColor: '#111827' }}>
        <div className="text-center">
          <div className="w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-white font-medium">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          <p className="text-gray-400 text-sm mt-2">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="h-screen w-full" style={{ backgroundColor: '#111827' }}>
      {renderCurrentPage()}
      <BottomNavigation
        items={navigationItems}
        onItemClick={handleNavigationClick}
      />
    </div>
  )
}

export default App
