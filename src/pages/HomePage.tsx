import React, { useState, useCallback } from 'react'
import { Button } from 'primereact/button'
import WebApp from '@twa-dev/sdk'
import ReferralModal from '../components/ReferralModal'
import CardIssueModal from '../components/CardIssueModal'
import EmailActivationModal from '../components/EmailActivationModal'
import CodeConfirmationModal from '../components/CodeConfirmationModal'
import TopUpModal from '../components/TopUpModal'
import CardManagementModal from '../components/CardManagementModal'
import PaymentModal from '../components/PaymentModal'
import { User } from '../types/user'
import { apiClient, Card } from '../services/api'

interface TelegramUser {
  id: number
  first_name: string
  last_name?: string
  username?: string
  photo_url?: string
}

interface HomePageProps {
  user: TelegramUser | null
  appUser?: User | null
  isNewUser?: boolean
  onCloseModals?: (closeFunction: () => void) => void
}


const HomePage: React.FC<HomePageProps> = ({ user, appUser, isNewUser, onCloseModals }) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º user –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
  const userName = user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  React.useEffect(() => {
    if (appUser) {
      console.log('üè† HomePage: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', {
        id: appUser.id,
        nick_name: appUser.nick_name,
        telegram_id: appUser.telegram_id,
        isNewUser: isNewUser,
        status: appUser.status
      })
      
      if (isNewUser) {
        console.log('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
      }
    }
  }, [appUser, isNewUser])
  const [isReferralModalOpen, setIsReferralModalOpen] = useState(false)
  const [isCardIssueModalOpen, setIsCardIssueModalOpen] = useState(false)
  const [isEmailActivationModalOpen, setIsEmailActivationModalOpen] = useState(false)
  const [isCodeConfirmationModalOpen, setIsCodeConfirmationModalOpen] = useState(false)
  const [userEmail, setUserEmail] = useState('')
  // const [isUserRegistered, setIsUserRegistered] = useState(false) // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [isTopUpModalOpen, setIsTopUpModalOpen] = useState(false)
  const [isCardManagementModalOpen, setIsCardManagementModalOpen] = useState(false)
  const [selectedCardIndex, setSelectedCardIndex] = useState(0)
  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false)
  const [paymentAmount, setPaymentAmount] = useState(0)
  const [userCards, setUserCards] = useState<Card[]>([])
  const [isLoadingCards, setIsLoadingCards] = useState(false)
  
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchUserCards = async () => {
    try {
      setIsLoadingCards(true)
      console.log('üÉè –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      
      const response = await apiClient.getCards({
        program_id: 'bbcaff9a-dfdc-4274-a8e5-b65733b8a4e7' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É program_id
      })
      
      if (response.success && response.data) {
        console.log('‚úÖ –ö–∞—Ä—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', response.data)
        setUserCards(response.data)
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç:', response.error)
        setUserCards([])
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç:', error)
      setUserCards([])
    } finally {
      setIsLoadingCards(false)
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–æ–¥–∞–ª–æ–∫
  const closeAllModals = useCallback(() => {
    setIsReferralModalOpen(false)
    setIsCardIssueModalOpen(false)
    setIsEmailActivationModalOpen(false)
    setIsCodeConfirmationModalOpen(false)
    setIsTopUpModalOpen(false)
    setIsCardManagementModalOpen(false)
    setIsPaymentModalOpen(false)
  }, [])
  
  // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  React.useEffect(() => {
    if (onCloseModals) {
      onCloseModals(closeAllModals)
    }
  }, [onCloseModals, closeAllModals])
  

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram WebApp API
  const testTelegramAPI = () => {
    try {
      const userInfo = WebApp.initDataUnsafe?.user
      const platform = WebApp.platform
      const version = WebApp.version
      const theme = WebApp.colorScheme
      
      console.log(`Telegram WebApp Info:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo ? `${userInfo.first_name} ${userInfo.last_name || ''}` : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}
–í–µ—Ä—Å–∏—è: ${version}
–¢–µ–º–∞: ${theme}
–ì–æ—Ç–æ–≤: ${WebApp.isExpanded ? '–î–∞' : '–ù–µ—Ç'}`)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp: ' + error)
    }
  }

  return (
    <div className="h-screen flex flex-col overflow-hidden" style={{ backgroundColor: '#111827' }}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º status bar */}
      <div className="flex-1 overflow-y-auto" style={{ paddingTop: 'env(safe-area-inset-top, 0)' }}>
        <div className="p-4 pb-20">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold text-white mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</h1>
            <p className="text-gray-300 text-sm">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {userName}!</p>
            
            {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {isNewUser && (
              <div className="mt-4 p-3 bg-green-500/20 border border-green-500/30 rounded-lg">
                <p className="text-green-400 text-sm font-medium">
                  üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
                </p>
                <p className="text-green-300 text-xs mt-1">
                  –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
                </p>
              </div>
            )}
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
          <div className="space-y-4 mb-6">
            {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã */}
            <div className="bg-gray-800 rounded-lg p-6">
              <div className="flex items-center mb-4">
                {/* –ò–∫–æ–Ω–∫–∞ –∫–∞—Ä—Ç—ã */}
                <div className="w-16 h-10 mr-4 flex items-center justify-center">
                  <i className="pi pi-credit-card text-gray-400 text-2xl"></i>
                </div>
                
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ */}
                <div className="flex-1">
                  <h3 className="text-white text-lg font-medium">–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</h3>
                  <p className="text-gray-300 text-sm">Mastercard , Visa</p>
                  <div className="flex items-center mt-2">
                    <span className="text-gray-300 text-sm">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                    <span className="text-white text-xl font-bold ml-2">$10</span>
                  </div>
                </div>
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è */}
              <button 
                onClick={() => setIsCardIssueModalOpen(true)}
                className="w-full bg-yellow-400 text-black font-semibold py-3 px-4 rounded-lg hover:bg-yellow-500 transition-colors"
              >
                –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É
              </button>
            </div>

            {userCards.map((card) => (
              <div key={card.id} className="bg-gray-800 rounded-lg p-6">
                <div className="flex items-center mb-4">
                  {/* –ò–∫–æ–Ω–∫–∞ –∫–∞—Ä—Ç—ã */}
                  <div className="w-16 h-10 mr-4 flex items-center justify-center">
                    <i className="pi pi-credit-card text-white text-2xl"></i>
                  </div>
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ */}
                  <div className="flex-1">
                    <h3 className="text-white text-lg font-medium">{card.title}</h3>
                    <p className="text-gray-300 text-sm">{card.brand} ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ {card.last4}</p>
                    <p className="text-gray-400 text-xs">–ò—Å—Ç–µ–∫–∞–µ—Ç: {card.expiration_date_short}</p>
                    <div className="flex items-center mt-2">
                      <span className="text-gray-300 text-sm">–ë–∞–ª–∞–Ω—Å:</span>
                      <span className="text-white text-xl font-bold ml-2">${card.spent_amount}</span>
                    </div>
                  </div>
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è */}
                <button 
                  onClick={() => {
                    if (card.status === 'ACTIVE') {
                      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã
                      const activeCards = userCards.filter(c => c.status === 'ACTIVE')
                      const cardIndex = activeCards.findIndex(c => c.id === card.id)
                      setSelectedCardIndex(cardIndex)
                      setIsCardManagementModalOpen(true)
                    } else {
                      console.log('–ö–∞—Ä—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!')
                    }
                  }}
                  className="w-full bg-yellow-400 text-black font-semibold py-3 px-4 rounded-lg hover:bg-yellow-500 transition-colors"
                >
                  {card.status === 'ACTIVE' ? '–£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–æ–π' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                </button>
              </div>
            ))}
          </div>

          {/* –°–µ–∫—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ 2 –∏–ª–∏ –º–µ–Ω—å—à–µ */}
          {userCards.length <= 1 && (
            <button 
              onClick={() => setIsReferralModalOpen(true)}
              className="w-full bg-gray-700 rounded-lg p-4 hover:bg-gray-600 transition-colors"
            >
              <div className="flex items-center">
                {/* –ò–∫–æ–Ω–∫–∞ –¥—Ä—É–∑–µ–π */}
                <div className="w-8 h-8 border-2 border-white rounded-full mr-3 flex items-center justify-center">
                  <i className="pi pi-users text-white text-sm"></i>
                </div>
                
                <div className="flex-1 text-left">
                  <p className="text-white font-medium">–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!</p>
                  <p className="text-gray-300 text-sm mt-1">–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∑–¥–µ—Å—å</p>
                </div>
              </div>
            </button>
          )}

          {/* –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ */}
          <div className="mt-6 flex gap-2 justify-center">
            <Button 
              label="Telegram API"
              icon="pi pi-telegram"
              onClick={testTelegramAPI}
              className="p-button-sm p-button-outlined p-button-secondary"
            />
            <Button 
              label="–¢–µ—Å—Ç"
              icon="pi pi-check"
              onClick={() => console.log('–ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!')}
              className="p-button-sm p-button-secondary"
            />
          </div>
        </div>
      </div>

      {/* Referral Modal */}
      <ReferralModal 
        isOpen={isReferralModalOpen}
        onClose={() => setIsReferralModalOpen(false)}
      />

      {/* Card Issue Modal */}
      <CardIssueModal 
        isOpen={isCardIssueModalOpen}
        onClose={() => setIsCardIssueModalOpen(false)}
        onNext={async () => {
          setIsCardIssueModalOpen(false)
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
          const hasEmail = appUser?.metadata?.email && appUser.metadata.email.trim() !== '' && appUser.metadata.email !== 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
          
          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ email –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã:')
          console.log('üìß Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', appUser?.metadata?.email)
          console.log('‚úÖ Email –≤–∞–ª–∏–¥–µ–Ω:', hasEmail)
          
          if (hasEmail) {
            // –ï—Å–ª–∏ email –µ—Å—Ç—å –≤ –ë–î, –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
            console.log('‚úÖ Email –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é')
            await fetchUserCards()
            setIsTopUpModalOpen(true)
          } else {
            // –ï—Å–ª–∏ email –Ω–µ—Ç –≤ –ë–î, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            console.log('‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Ç—Ä–µ–±—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é')
            setIsEmailActivationModalOpen(true)
          }
        }}
      />

      {/* Email Activation Modal */}
      <EmailActivationModal 
        isOpen={isEmailActivationModalOpen}
        onClose={() => setIsEmailActivationModalOpen(false)}
        onNext={(email) => {
          setUserEmail(email)
          setIsEmailActivationModalOpen(false)
          setIsCodeConfirmationModalOpen(true)
        }}
      />

      {/* Code Confirmation Modal */}
      <CodeConfirmationModal 
        isOpen={isCodeConfirmationModalOpen}
        onClose={() => setIsCodeConfirmationModalOpen(false)}
        onConfirm={async (code) => {
          try {
            console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞:', code, '–¥–ª—è email:', userEmail)
            
            if (!appUser?.telegram_id) {
              console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
              return
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const response = await apiClient.updateUserDataByTgId(appUser.telegram_id, {
              email: userEmail
            })

            if (response.success) {
              console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î:', response.data)
              // setIsUserRegistered(true) // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
              setIsCodeConfirmationModalOpen(false)
              // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
              await fetchUserCards()
              setIsTopUpModalOpen(true)
            } else {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email:', response.error)
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞:', error)
          }
        }}
        onResend={() => {
          console.log('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ')
        }}
        email={userEmail}
      />

      {/* Top Up Modal */}
      <TopUpModal 
        isOpen={isTopUpModalOpen}
        onClose={() => setIsTopUpModalOpen(false)}
        onPay={(amount) => {
          setPaymentAmount(amount)
          setIsTopUpModalOpen(false)
          setIsPaymentModalOpen(true)
        }}
        cards={userCards}
        isLoadingCards={isLoadingCards}
      />

      {/* Card Management Modal */}
      <CardManagementModal 
        isOpen={isCardManagementModalOpen}
        onClose={() => setIsCardManagementModalOpen(false)}
        cards={userCards.filter(c => c.status === 'ACTIVE')}
        currentCardIndex={selectedCardIndex}
        onCardChange={setSelectedCardIndex}
        onTopUp={() => {
          setIsCardManagementModalOpen(false)
          setIsTopUpModalOpen(true)
        }}
        onNewCard={() => {
          setIsCardManagementModalOpen(false)
          setIsCardIssueModalOpen(true)
        }}
      />

      {/* Payment Modal */}
      <PaymentModal 
        isOpen={isPaymentModalOpen}
        onClose={() => setIsPaymentModalOpen(false)}
        amount={paymentAmount}
        onSuccess={() => {
          console.log('–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!')
          setIsPaymentModalOpen(false)
        }}
      />
    </div>
  )
}

export default HomePage