import React, { useState, useEffect } from 'react'
import { Avatar } from 'primereact/avatar'
import Button from '../components/Button'
import InputText from '../components/InputText'
import Checkbox from '../components/Checkbox'
import Sidebar from '../components/Sidebar'
import BottomNavigation from '../components/BottomNavigation'
import ReferralModal from '../components/ReferralModal'
import ReferralStatsModal from '../components/ReferralStatsModal'
import EmailActivationModal from '../components/EmailActivationModal'
import CodeConfirmationModal from '../components/CodeConfirmationModal'
import Toast from '../components/Toast'
import { useToast } from '../hooks/useToast'
import { User } from '../types/user'
import { apiClient } from '../services/api'

interface TelegramUser {
  id: number
  first_name: string
  last_name?: string
  username?: string
  photo_url?: string
}

interface ProfilePageProps {
  user: TelegramUser | null
  appUser?: User | null
  currentPage: string
  setCurrentPage: (page: string) => void
}

const ProfilePage: React.FC<ProfilePageProps> = ({ user, appUser, currentPage, setCurrentPage }) => {
  const [sidebarVisible, setSidebarVisible] = useState(false)
  const [isReferralModalOpen, setIsReferralModalOpen] = useState(false)
  const [isReferralStatsModalOpen, setIsReferralStatsModalOpen] = useState(false)
  const [personalInfoModalVisible, setPersonalInfoModalVisible] = useState(false)
  const [isEmailModalOpen, setIsEmailModalOpen] = useState(false)
  const [isCodeConfirmationModalOpen, setIsCodeConfirmationModalOpen] = useState(false)
  const [userEmail, setUserEmail] = useState('')
  const { toast, showSuccess, showError, showInfo, hideToast } = useToast()
  const [lastName, setLastName] = useState('')
  const [firstName, setFirstName] = useState('')
  const [patronymic, setPatronymic] = useState('')
  const [passportSeries, setPassportSeries] = useState('')
  const [passportNumber, setPassportNumber] = useState('')
  const [registrationPlace, setRegistrationPlace] = useState('')
  const [consentChecked, setConsentChecked] = useState(true)

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  useEffect(() => {
    console.log('üîç ProfilePage state change - isEmailModalOpen:', isEmailModalOpen)
  }, [isEmailModalOpen])

  useEffect(() => {
    console.log('üîç ProfilePage state change - isCodeConfirmationModalOpen:', isCodeConfirmationModalOpen)
  }, [isCodeConfirmationModalOpen])

  const navigationItems = [
    { id: 'home', label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'pi pi-home', path: '/', active: currentPage === 'home' },
    { id: 'history', label: '–ò—Å—Ç–æ—Ä–∏—è', icon: 'pi pi-history', path: '/history', active: currentPage === 'history' },
    { id: 'profile', label: '–ü—Ä–æ—Ñ–∏–ª—å', icon: 'pi pi-user', path: '/profile', active: currentPage === 'profile' }
  ]

  const handleNavigationClick = (item: any) => {
    setCurrentPage(item.id)
  }

  const handlePersonalInfoClick = () => {
    setPersonalInfoModalVisible(true)
  }

  const handleReferralStatsClick = () => {
    setIsReferralStatsModalOpen(true)
  }

 

  const handlePersonalInfoSave = () => {
    setPersonalInfoModalVisible(false)
    showInfo('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
  }

  const handleEmailSave = async (newEmail: string) => {
    try {
      console.log('üìß –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email:', newEmail)
      setUserEmail(newEmail)
      setIsEmailModalOpen(false)
      setIsCodeConfirmationModalOpen(true)
      console.log('‚úÖ EmailActivationModal –∑–∞–∫—Ä—ã—Ç, CodeConfirmationModal –æ—Ç–∫—Ä—ã—Ç')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email:', error)
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email')
    }
  }

  const handleCodeConfirmation = async (code: string) => {
    try {
      console.log('üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞:', code, '–¥–ª—è email:', userEmail)

      if (!appUser?.telegram_id) {
        showError('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const response = await apiClient.updateUserDataByTgId(appUser.telegram_id, {
        email: userEmail
      })

      if (response.success) {
        console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î:', response.data)
        setIsCodeConfirmationModalOpen(false)
        showSuccess('Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...')
        console.log('üéâ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∑–∞–≤–µ—Ä—à–µ–Ω')

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        setTimeout(() => {
          setCurrentPage('home')
          console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–ø–ª–∞—Ç—ã')
        }, 1500)
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email:', response.error)
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞:', error)
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞')
    }
  }

  const handleEmailEditOpen = () => {
    console.log('üîß –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email')
    setIsEmailModalOpen(true)
  }


  const sidebarContent = (
    <div className="p-4 bg-gray-800 h-full">
      <h2 className="text-2xl font-semibold text-white mb-6">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h2>
      
      <div className="mt-6">
        <div className="mb-4">
          <label className="block mb-2 font-medium text-gray-300">ID (–Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π):</label>
          <InputText
            value={user?.id?.toString() || ''}
            disabled
            className="w-full bg-gray-600 text-gray-400 border-gray-500 cursor-not-allowed"
          />
        </div>
        
        <div className="mb-4">
          <label className="block mb-2 font-medium text-gray-300">–ò–º—è:</label>
          <InputText
            value={user?.first_name || ''}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
            className="w-full bg-gray-700 text-white border-gray-600 focus:border-yellow-400"
          />
        </div>
        
        <div className="mb-4">
          <label className="block mb-2 font-medium text-gray-300">–§–∞–º–∏–ª–∏—è:</label>
          <InputText
            value={user?.last_name || ''}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
            className="w-full bg-gray-700 text-white border-gray-600 focus:border-yellow-400"
          />
        </div>
        
        <div className="mb-4">
          <label className="block mb-2 font-medium text-gray-300">Username:</label>
          <InputText
            value={user?.username || ''}
            placeholder="–í–≤–µ–¥–∏—Ç–µ username"
            className="w-full bg-gray-700 text-white border-gray-600 focus:border-yellow-400"
          />
        </div>
        
                <div className="mb-4">
                  <label className="block mb-2 font-medium text-gray-300">Email:</label>
                  <InputText
                    disabled
                    placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                    className="w-full bg-gray-600 text-gray-400 border-gray-500 cursor-not-allowed"
                  />
                </div>
        
      </div>
      
      <div className="flex flex-col gap-3 mt-8">
        <Button 
          label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" 
          icon="pi pi-check"
          className="w-full bg-yellow-400 text-black hover:bg-yellow-500"
          onClick={() => {
            setSidebarVisible(false)
            console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
          }}
        />
        <Button 
          label="–û—Ç–º–µ–Ω–∞" 
          icon="pi pi-times"
          severity="secondary"
          outlined
          className="w-full text-white border-gray-600 hover:bg-gray-700"
          onClick={() => setSidebarVisible(false)}
        />
      </div>
    </div>
  )

  return (
    <div className="h-screen flex flex-col overflow-hidden" style={{ backgroundColor: '#111827' }}>
      <div className="flex-1 overflow-y-auto" style={{ paddingTop: 'env(safe-area-inset-top, 0)', paddingBottom: '110px' }}>
        <div className="p-4">
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold text-white mb-2">–ü—Ä–æ—Ñ–∏–ª—å</h1>
          <p className="text-gray-300 text-sm">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</p>
        </div>

        {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className="text-center mb-8">
          <div className="w-32 h-32 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Avatar 
              image={user?.photo_url} 
              icon="pi pi-user" 
              size="xlarge" 
              shape="circle"
              className="bg-gray-600 text-white"
              style={{ width: '120px', height: '120px', fontSize: '48px' }}
            />
          </div>
          <h2 className="text-white text-lg font-medium">{user?.first_name} {user?.last_name}</h2>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã */}
          {appUser && (
            <div className="mt-2 text-center">
              <p className="text-gray-400 text-sm">ID –≤ —Å–∏—Å—Ç–µ–º–µ: {appUser.id}</p>
              <p className="text-gray-400 text-sm">Nick: {appUser.nick_name}</p>
              <p className="text-gray-400 text-sm">Telegram ID: {appUser.telegram_id}</p>
              <p className="text-gray-400 text-sm">–°—Ç–∞—Ç—É—Å: {appUser.status}</p>
              {appUser.metadata?.last_activity && (
                <p className="text-gray-400 text-sm">
                  –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {new Date(appUser.metadata.last_activity).toLocaleDateString()}
                </p>
              )}
            </div>
          )}
        </div>

        {/* –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è */}
        <div className="mb-6">
          <div className="bg-gray-800 rounded-lg">
                    <button 
                      onClick={handlePersonalInfoClick}
                      className="w-full flex items-center gap-3 p-4 border-b border-gray-700 hover:bg-gray-700 transition-colors"
                    >
                      <div className="w-8 h-8 bg-gray-700 rounded-lg flex items-center justify-center">
                        <i className="pi pi-user-edit text-white text-sm"></i>
                      </div>
                      <div className="flex-1 text-left">
                        <h4 className="text-white font-medium">–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                      </div>
                    </button>
            
            <div className="flex items-center gap-3 p-4 border-b border-gray-700">
              <div className="w-8 h-8 bg-gray-700 rounded-lg flex items-center justify-center">
                <i className="pi pi-phone text-white text-sm"></i>
              </div>
              <div className="flex-1">
                <h4 className="text-white font-medium">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</h4>
              </div>
            </div>
            
            <button 
              onClick={handleReferralStatsClick}
              className="w-full flex items-center gap-3 p-4 hover:bg-gray-700 transition-colors"
            >
              <div className="w-8 h-8 bg-gray-700 rounded-lg flex items-center justify-center">
                <i className="pi pi-chart-bar text-white text-sm"></i>
              </div>
              <div className="flex-1 text-left">
                <h4 className="text-white font-medium">–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
              </div>
            </button>
          </div>
        </div>

        {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ */}
        <button 
          onClick={() => setIsReferralModalOpen(true)}
          className="w-full bg-gray-700 rounded-lg p-4 hover:bg-gray-600 transition-colors"
        >
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center">
              <i className="pi pi-users text-gray-800 text-lg"></i>
            </div>
            <div className="flex-1 text-left">
              <h4 className="text-white font-medium mb-1">–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!</h4>
              <p className="text-gray-400 text-sm">–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∑–¥–µ—Å—å</p>
            </div>
          </div>
        </button>
        </div>
      </div>

      <BottomNavigation
        items={navigationItems}
        onItemClick={handleNavigationClick}
      />

      <Sidebar
        visible={sidebarVisible}
        onHide={() => setSidebarVisible(false)}
        position="right"
        className="w-full md:w-30rem bg-gray-800 text-white"
      >
        {sidebarContent}
      </Sidebar>

      {/* Referral Modal */}
      <ReferralModal 
        isOpen={isReferralModalOpen}
        onClose={() => setIsReferralModalOpen(false)}
      />

      {/* Referral Stats Modal */}
      <ReferralStatsModal 
        isOpen={isReferralStatsModalOpen}
        onClose={() => setIsReferralStatsModalOpen(false)}
      />

      {/* Personal Information Modal */}
      {personalInfoModalVisible && (
        <div className="fixed inset-0 z-[100]">
          <div 
            className="absolute inset-0 bg-black bg-opacity-50"
            onClick={() => setPersonalInfoModalVisible(false)}
          ></div>
          <div className="relative bg-gray-800 w-full h-full overflow-y-auto">
            <div className="flex items-center justify-between p-6 border-b border-gray-700">
              <h2 className="text-white text-lg font-semibold">–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              <button 
                onClick={() => setPersonalInfoModalVisible(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <i className="pi pi-times text-xl"></i>
              </button>
            </div>
            
            <div className="p-6 space-y-4 pb-32">
              {/* Email */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="font-medium text-gray-300">Email</label>
                  <button 
                    onClick={handleEmailEditOpen}
                    className="text-yellow-400 text-sm hover:text-yellow-300 transition-colors"
                  >
                    Edit
                  </button>
                </div>
                <InputText
                  disabled
                  value={appUser?.metadata?.email || 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}
                  className="w-full bg-gray-600 text-gray-400 border-gray-500 cursor-not-allowed personal-info-input"
                />
              </div>

              {/* –§–∞–º–∏–ª–∏—è */}
              <div>
                <label className="block mb-2 font-medium text-gray-300">–§–∞–º–∏–ª–∏—è</label>
                <InputText
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é"
                  className="w-full bg-gray-700 text-white border-gray-600 focus:border-yellow-400 personal-info-input"
                />
              </div>

              {/* –ò–º—è */}
              <div>
                <label className="block mb-2 font-medium text-gray-300">–ò–º—è</label>
                <InputText
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è"
                  className="w-full bg-gray-700 text-white border-gray-600 focus:border-yellow-400 personal-info-input"
                />
              </div>

              {/* –û—Ç—á–µ—Å—Ç–≤–æ */}
              <div>
                <label className="block mb-2 font-medium text-gray-300">–û—Ç—á–µ—Å—Ç–≤–æ</label>
                <InputText
                  value={patronymic}
                  onChange={(e) => setPatronymic(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –æ—Ç—á–µ—Å—Ç–≤–æ"
                  className="w-full bg-gray-700 text-white border-gray-600 focus:border-yellow-400 personal-info-input"
                />
              </div>

              {/* –°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ */}
              <div>
                <label className="block mb-2 font-medium text-gray-300">–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞</label>
                <InputText
                  value={passportSeries}
                  onChange={(e) => setPassportSeries(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞"
                  className="w-full bg-gray-700 text-white border-gray-600 focus:border-yellow-400 personal-info-input"
                />
              </div>

              {/* –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ */}
              <div>
                <label className="block mb-2 font-medium text-gray-300">–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞</label>
                <InputText
                  value={passportNumber}
                  onChange={(e) => setPassportNumber(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞"
                  className="w-full bg-gray-700 text-white border-gray-600 focus:border-yellow-400 personal-info-input"
                />
              </div>

              {/* –ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
              <div>
                <label className="block mb-2 font-medium text-gray-300">–ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</label>
                <InputText
                  value={registrationPlace}
                  onChange={(e) => setRegistrationPlace(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                  className="w-full bg-gray-700 text-white border-gray-600 focus:border-yellow-400 personal-info-input"
                />
              </div>

              {/* –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö */}
              <div className="flex items-center gap-2 mt-6">
                <Checkbox
                  checked={consentChecked}
                  onChange={(e) => setConsentChecked(e.target.checked)}
                  className="custom-checkbox"
                />
                <span className="text-gray-300 text-sm">
                  –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ <strong>–û–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</strong>
                </span>
              </div>

            </div>
            
            {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–Ω–∏–∑—É */}
            <div className="fixed bottom-0 left-0 right-0 p-6 bg-gray-800 border-t border-gray-700">
              <button 
                onClick={handlePersonalInfoSave}
                className="w-full bg-yellow-400 text-black font-semibold py-3 px-4 rounded-lg hover:bg-yellow-500 transition-colors"
                style={{ height: '54px' }}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Email Edit Modal */}
      <EmailActivationModal
        isOpen={isEmailModalOpen}
        onClose={() => setIsEmailModalOpen(false)}
        onNext={handleEmailSave}
      />

      {/* Code Confirmation Modal */}
      <CodeConfirmationModal 
        isOpen={isCodeConfirmationModalOpen}
        onClose={() => setIsCodeConfirmationModalOpen(false)}
        onConfirm={handleCodeConfirmation}
        onResend={() => {
          // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞
          showInfo('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ')
        }}
        email={userEmail}
      />

      {/* Toast Notification */}
      <Toast
        type={toast.type}
        message={toast.message}
        isVisible={toast.isVisible}
        onClose={hideToast}
        duration={8000}
      />
    </div>
  )
}

export default ProfilePage

