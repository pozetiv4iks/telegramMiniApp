// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
import { apiClient } from './api';
import { 
  Card, 
  CreateCardRequest, 
  UpdateCardRequest,
  QueryParams
} from './api';

export class CardService {
  private static instance: CardService;

  private constructor() {}

  public static getInstance(): CardService {
    if (!CardService.instance) {
      CardService.instance = new CardService();
    }
    return CardService.instance;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã
   */
  public async getAllCards(params?: QueryParams): Promise<Card[] | null> {
    try {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç...');
      const response = await apiClient.getCards(params);
      
      if (response.success && response.data) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –∫–∞—Ä—Ç`);
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã –ø–æ program_id
   */
  public async getCardsByProgramId(programId: string, params?: QueryParams): Promise<Card[] | null> {
    try {
      console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ program_id: ${programId}`);
      
      const queryParams = {
        ...params,
        program_id: programId
      };
      
      const response = await apiClient.getCards(queryParams);
      
      if (response.success && response.data) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –∫–∞—Ä—Ç –¥–ª—è program_id: ${programId}`);
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç –ø–æ program_id:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç –ø–æ program_id:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
   */
  public async createCard(data: CreateCardRequest): Promise<Card | null> {
    try {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã...');
      console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', data);
      
      const response = await apiClient.createCard(data);
      
      if (response.success && response.data) {
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
          id: response.data.id,
          title: response.data.title,
          sub_account_id: response.data.sub_account_id,
          status: response.data.status,
          currency: response.data.currency
        });
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ ID
   */
  public async getCardById(cardId: string): Promise<Card | null> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ø–æ ID: ${cardId}`);
      
      const response = await apiClient.getCard(cardId);
      
      if (response.success && response.data) {
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞:', {
          id: response.data.id,
          title: response.data.title,
          sub_account_id: response.data.sub_account_id,
          status: response.data.status
        });
        return response.data;
      }
      
      console.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç—ã:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É
   */
  public async updateCard(cardId: string, data: UpdateCardRequest): Promise<Card | null> {
    try {
      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã: ${cardId}`);
      console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', data);
      
      const response = await apiClient.updateCard(cardId, data);
      
      if (response.success && response.data) {
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
          id: response.data.id,
          title: response.data.title,
          status: response.data.status
        });
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async createCardForUser(
    subAccountId: string, 
    cardName: string, 
    email?: string, 
    programId?: string
  ): Promise<Card | null> {
    try {
      console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`);
      console.log(`üìã Sub Account ID: ${subAccountId}`);
      console.log(`üìã Card Name: ${cardName}`);
      console.log(`üìã Email: ${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      
      const cardData: CreateCardRequest = {
        program_id: programId || 'dbb74408-0318-401c-ac5d-72e522fa8aaa', // –†–∞–±–æ—á–∏–π program_id
        sub_account_id: subAccountId,
        card_name: cardName,
        ...(email && { email }) // –î–æ–±–∞–≤–ª—è–µ–º email —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
      };
      
      const card = await this.createCard(cardData);
      
      if (card) {
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          card_id: card.id,
          card_title: card.title,
          sub_account_id: card.sub_account_id,
          status: card.status
        });
      }
      
      return card;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ sub_account_id
   */
  public async getUserCards(subAccountId: string): Promise<Card[] | null> {
    try {
      console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ sub_account_id: ${subAccountId}`);
      
      const response = await apiClient.getCards({ sub_account_id: subAccountId });
      
      if (response.success && response.data) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const cardService = CardService.getInstance();
