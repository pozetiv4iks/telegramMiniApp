// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (tgId, tgIdCard, email)
import { apiClient } from './api';
import { 
  UserData, 
  CreateUserDataRequest, 
  UpdateUserDataRequest, 
  UserDataQueryParams
} from '../types/userData';

export class UserDataService {
  private static instance: UserDataService;

  private constructor() {}

  public static getInstance(): UserDataService {
    if (!UserDataService.instance) {
      UserDataService.instance = new UserDataService();
    }
    return UserDataService.instance;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  public async getAllUserData(params?: UserDataQueryParams): Promise<UserData[] | null> {
    try {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
      const response = await apiClient.getAllUserData(params);
      
      if (response.success && response.data) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö`);
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  public async createUserData(data: CreateUserDataRequest): Promise<UserData | null> {
    try {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
      console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', data);
      
      const response = await apiClient.createUserData(data);
      
      if (response.success && response.data) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:', {
          id: response.data.id,
          tgId: response.data.tgId,
          tgIdCard: response.data.tgIdCard,
          email: response.data.email
        });
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ Telegram ID
   */
  public async getUserDataByTgId(tgId: string): Promise<UserData | null> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ Telegram ID: ${tgId}`);
      
      const response = await apiClient.getUserDataByTgId(tgId);
      
      if (response.success && response.data) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã:', {
          id: response.data.id,
          tgId: response.data.tgId,
          tgIdCard: response.data.tgIdCard,
          email: response.data.email
        });
        return response.data;
      }
      
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ Telegram ID
   */
  public async updateUserDataByTgId(tgId: string, data: UpdateUserDataRequest): Promise<UserData | null> {
    try {
      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ Telegram ID: ${tgId}`);
      console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', data);
      
      const response = await apiClient.updateUserDataByTgId(tgId, data);
      
      if (response.success && response.data) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
          id: response.data.id,
          tgId: response.data.tgId,
          tgIdCard: response.data.tgIdCard,
          email: response.data.email
        });
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ Telegram ID
   */
  public async deleteUserDataByTgId(tgId: string): Promise<UserData | null> {
    try {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ Telegram ID: ${tgId}`);
      
      const response = await apiClient.deleteUserDataByTgId(tgId);
      
      if (response.success && response.data) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã:', {
          id: response.data.id,
          tgId: response.data.tgId,
          tgIdCard: response.data.tgIdCard,
          email: response.data.email
        });
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ ID
   */
  public async getUserDataById(id: number): Promise<UserData | null> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ ID: ${id}`);
      
      const response = await apiClient.getUserDataById(id);
      
      if (response.success && response.data) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ ID:', {
          id: response.data.id,
          tgId: response.data.tgId,
          tgIdCard: response.data.tgIdCard,
          email: response.data.email
        });
        return response.data;
      }
      
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ ID:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ ID:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  public async createOrUpdateUserData(tgId: string, data: CreateUserDataRequest): Promise<UserData | null> {
    try {
      console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram ID: ${tgId}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const existingData = await this.getUserDataByTgId(tgId);
      
      if (existingData) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
        console.log('üìù –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º...');
        return await this.updateUserDataByTgId(tgId, {
          tgIdCard: data.tgIdCard,
          email: data.email
        });
      } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        console.log('üÜï –î–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ...');
        return await this.createUserData(data);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –°–≤—è–∑–∞—Ç—å Telegram ID —Å –∫–∞—Ä—Ç–æ–π –∏ email
   */
  public async linkTelegramWithCardAndEmail(tgId: string, tgIdCard: string, email: string): Promise<UserData | null> {
    try {
      console.log(`üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Telegram ID ${tgId} —Å –∫–∞—Ä—Ç–æ–π ${tgIdCard} –∏ email ${email}`);
      
      const userData = await this.createOrUpdateUserData(tgId, {
        tgId,
        tgIdCard,
        email
      });
      
      if (userData) {
        console.log('‚úÖ Telegram ID —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –∫–∞—Ä—Ç–æ–π –∏ email:', {
          tgId: userData.tgId,
          tgIdCard: userData.tgIdCard,
          email: userData.email
        });
      }
      
      return userData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ Telegram ID —Å –∫–∞—Ä—Ç–æ–π –∏ email:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const userDataService = UserDataService.getInstance();
