// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
import { apiClient } from './api';
import { 
  User, 
  TelegramUserData, 
  UserSession 
} from '../types/user';
import { 
  UserData, 
  CreateUserDataRequest 
} from '../types/userData';

export class UserService {
  private static instance: UserService;
  private currentSession: UserSession | null = null;

  private constructor() {}

  public static getInstance(): UserService {
    if (!UserService.instance) {
      UserService.instance = new UserService();
    }
    return UserService.instance;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: Telegram ID ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ sub-account ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
   */
  public async loginUser(
    telegramId: string, 
    telegramData?: TelegramUserData
  ): Promise<UserSession | null> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      console.log('üÜî Telegram ID:', telegramId);

      // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –ø–æ Telegram ID
      console.log('üîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ Telegram ID...');
      console.log('üìû –í—ã–∑—ã–≤–∞–µ–º apiClient.getUserDataByTgId —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:', telegramId);
      const existingUserData = await apiClient.getUserDataByTgId(telegramId);
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç getUserDataByTgId:', existingUserData);
      
      let userData: UserData | null = null;
      let isNewUser = false;

      if (existingUserData.success && existingUserData.data) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î
        userData = existingUserData.data;
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î!');
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          id: userData.id,
          tgId: userData.tgId,
          tgIdCard: userData.tgIdCard,
          email: userData.email,
          created_at: userData.created_at
        });
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
        
        // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º sub-account
        console.log('üìù –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º sub-account...');
        const subAccount = await this.createSubAccountForUser(telegramId);
        
        if (subAccount) {
          console.log('‚úÖ Sub-account —Å–æ–∑–¥–∞–Ω:', {
            id: subAccount.id,
            wallet_id: subAccount.wallet_id,
            program_id: subAccount.program_id
          });

          // –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
          console.log('üìù –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
          const newUserData = await this.createUserDataInDB(telegramId, subAccount.id, telegramData);
          
          if (newUserData) {
            userData = newUserData;
            isNewUser = true;
            console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î!');
            console.log('üë§ –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
              id: userData.id,
              tgId: userData.tgId,
              tgIdCard: userData.tgIdCard,
              email: userData.email,
              created_at: userData.created_at
            });
          }
        }
      }

      if (userData) {
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        const session: UserSession = {
          user: this.convertUserDataToUser(userData, telegramData),
          isNewUser,
          sessionId: `session_${Date.now()}_${userData.id}`,
          loginTime: new Date().toISOString()
        };

        this.currentSession = session;

        console.log('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É!');
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:', {
          sessionId: session.sessionId,
          isNewUser: session.isNewUser,
          loginTime: session.loginTime
        });

        return session;
      }

      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }


  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ sub-account –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async createSubAccountForUser(telegramId: string): Promise<any> {
    try {
      console.log('üíº –°–æ–∑–¥–∞–µ–º sub-account –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      console.log('üìû –í—ã–∑—ã–≤–∞–µ–º apiClient.createSubAccount —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
        nick_name: telegramId,
        program_id: '–±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ –∑–∞–≥–ª—É—à–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
      });
      const response = await apiClient.createSubAccount({
        nick_name: telegramId, // –ü–µ—Ä–µ–¥–∞–µ–º Telegram ID –∫–∞–∫ nick_name
        // program_id –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ –∑–∞–≥–ª—É—à–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      });
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç createSubAccount:', response);
      
      if (response.success && response.data) {
        console.log('‚úÖ Sub-account —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', {
          id: response.data.id,
          wallet_id: response.data.wallet_id,
          program_id: response.data.program_id,
          nick_name: response.data.nick_name
        });
        return response.data;
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sub-account:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sub-account:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
   */
  private async createUserDataInDB(
    telegramId: string, 
    subAccountId: string, 
    telegramData?: TelegramUserData
  ): Promise<UserData | null> {
    try {
      console.log('üíæ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
      
      // Email –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–¥
      const email = '';
      
      const userDataRequest: CreateUserDataRequest = {
        tgId: telegramId,
        tgIdCard: subAccountId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID sub-account –∫–∞–∫ tgIdCard
        email: email
      };
      
      console.log('üìû –í—ã–∑—ã–≤–∞–µ–º apiClient.createUserData —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', userDataRequest);
      const response = await apiClient.createUserData(userDataRequest);
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç createUserData:', response);
      
      if (response.success && response.data) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î:', {
          id: response.data.id,
          tgId: response.data.tgId,
          tgIdCard: response.data.tgIdCard,
          email: response.data.email
        });
        return response.data;
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', error);
      return null;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è UserData –≤ User –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  private convertUserDataToUser(userData: UserData, telegramData?: TelegramUserData): User {
    return {
      id: userData.id.toString(),
      nick_name: userData.tgId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID –∫–∞–∫ nick_name
      telegram_id: userData.tgId,
      first_name: telegramData?.first_name || userData.tgId,
      last_name: telegramData?.last_name || '',
      username: telegramData?.username || '',
      language_code: telegramData?.language_code || 'en',
      is_bot: telegramData?.is_bot || false,
      status: 'active',
      created_at: userData.created_at,
      updated_at: userData.updated_at,
      metadata: {
        tgIdCard: userData.tgIdCard,
        email: userData.email,
        last_activity: new Date().toISOString()
      }
    };
  }


  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  public getCurrentSession(): UserSession | null {
    return this.currentSession;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public getCurrentUser(): User | null {
    return this.currentSession?.user || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º
   */
  public isCurrentUserNew(): boolean {
    return this.currentSession?.isNewUser || false;
  }

  /**
   * –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public logout(): void {
    console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    this.currentSession = null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  public async getAllUsers(): Promise<User[] | null> {
    try {
      const response = await apiClient.getUsers({ limit: 100 });
      
      if (response.success && response.data) {
        console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        return response.data;
      }
      
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ nick_name
   */
  public async searchUserByNickName(nickName: string): Promise<User[] | null> {
    try {
      const response = await apiClient.searchUserByNickName(nickName);
      
      if (response.success && response.data) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${response.data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å nick_name: ${nickName}`);
        return response.data;
      }
      
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ nick_name:', error);
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
   */
  public async searchUserByTelegramId(telegramId: string): Promise<User[] | null> {
    try {
      const response = await apiClient.searchUserByTelegramId(telegramId);
      
      if (response.success && response.data) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${response.data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_id: ${telegramId}`);
        return response.data;
      }
      
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const userService = UserService.getInstance();
