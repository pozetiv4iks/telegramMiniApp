// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å sub-accounts
import { 
  apiClient,
  SubAccount, 
  CreateSubAccountRequest, 
  SubAccountQueryParams,
  SubAccountTransaction,
  WithdrawRequest,
  DepositRequest
} from './api';

export class SubAccountService {
  private static instance: SubAccountService;

  private constructor() {}

  public static getInstance(): SubAccountService {
    if (!SubAccountService.instance) {
      SubAccountService.instance = new SubAccountService();
    }
    return SubAccountService.instance;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ sub-accounts
   */
  public async getAllSubAccounts(params?: SubAccountQueryParams): Promise<SubAccount[] | null> {
    try {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö sub-accounts...');
      const response = await apiClient.getSubAccounts(params);
      
      if (response.success && response.data) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} sub-accounts`);
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ sub-accounts:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ sub-accounts:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π sub-account
   */
  public async createSubAccount(data: CreateSubAccountRequest): Promise<SubAccount | null> {
    try {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ sub-account...');
      console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', data);
      
      const response = await apiClient.createSubAccount(data);
      
      if (response.success && response.data) {
        console.log('‚úÖ Sub-account —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', {
          id: response.data.id,
          wallet_id: response.data.wallet_id,
          program_id: response.data.program_id,
          balance: response.data.balance,
          currency: response.data.currency
        });
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sub-account:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sub-account:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å sub-account –ø–æ ID
   */
  public async getSubAccountById(subAccountId: string): Promise<SubAccount | null> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ sub-account –ø–æ ID: ${subAccountId}`);
      
      const response = await apiClient.getSubAccountById(subAccountId);
      
      if (response.success && response.data) {
        console.log('‚úÖ Sub-account –Ω–∞–π–¥–µ–Ω:', {
          id: response.data.id,
          wallet_id: response.data.wallet_id,
          balance: response.data.balance,
          currency: response.data.currency,
          status: response.data.status
        });
        return response.data;
      }
      
      console.log('‚ùå Sub-account –Ω–µ –Ω–∞–π–¥–µ–Ω:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ sub-account:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ sub-account
   */
  public async getSubAccountTransactions(subAccountId: string, params?: SubAccountQueryParams): Promise<SubAccountTransaction[] | null> {
    try {
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π sub-account: ${subAccountId}`);
      
      const response = await apiClient.getSubAccountTransactions(subAccountId, params);
      
      if (response.success && response.data) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return null;
    }
  }

  /**
   * –°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å sub-account
   */
  public async withdrawFromSubAccount(subAccountId: string, data: WithdrawRequest): Promise<any> {
    try {
      console.log(`üí∞ –°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å sub-account: ${subAccountId}`);
      console.log('üìã –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', data);
      
      const response = await apiClient.withdrawFromSubAccount(subAccountId, data);
      
      if (response.success) {
        console.log('‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã');
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–∏—Ç—å sub-account
   */
  public async depositToSubAccount(subAccountId: string, data: DepositRequest): Promise<any> {
    try {
      console.log(`üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ sub-account: ${subAccountId}`);
      console.log('üìã –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', data);
      
      const response = await apiClient.depositToSubAccount(subAccountId, data);
      
      if (response.success) {
        console.log('‚úÖ Sub-account —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω');
        return response.data;
      }
      
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏:', response.error);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å sub-account –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async createSubAccountForUser(userId: string, walletId?: string): Promise<SubAccount | null> {
    try {
      const wallet_id = walletId || `wallet_${userId}`;
      
      console.log(`üë§ –°–æ–∑–¥–∞–Ω–∏–µ sub-account –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      console.log(`üíº Wallet ID: ${wallet_id}`);
      
      const subAccount = await this.createSubAccount({
        wallet_id: wallet_id
        // program_id –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ –∑–∞–≥–ª—É—à–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      });
      
      if (subAccount) {
        console.log('‚úÖ Sub-account —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          user_id: userId,
          sub_account_id: subAccount.id,
          wallet_id: subAccount.wallet_id
        });
      }
      
      return subAccount;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sub-account –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const subAccountService = SubAccountService.getInstance();
